{"version":3,"sources":["logo.svg","test_data/sample.mp3","test_data/chant.mp3","test_data/electric-guitar.mp3","test_data/national-anthem.mp3","test_data/testfile.mp3","app-header/components/AppHeaderTitle.jsx","app-header/components/AppHeaderLogo.jsx","app-header/conatiners/AppHeader.jsx","player/components/PlayButton.jsx","player/components/TrackName.jsx","player/components/Track.jsx","player/containers/TrackList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","AppHeaderTitle","className","this","props","title","React","Component","AppHeaderLogo","src","logo","alt","AppHeader","PlayButton","togglePlay","bind","onTogglePlay","onClick","isPlaying","TrackName","name","Track","state","isTrackReady","containerRef","createRef","audioRef","current","play","pause","peaksInit","peaks","Peaks","init","container","mediaElement","webAudio","audioContext","AudioContext","zoomWaveformColor","overviewWaveformColor","overviewHighlightRectangleColor","height","setState","zoom","setZoom","onStop","onPlay","id","invisibleCssClass","ref","source","type","TrackList","currentPlayingTrack","onTrackPlay","onTrackStop","tracks","map","track","key","file","App","sample","chant","guitar","anthem","testfile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70111ce7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/sample.31ef35da.mp3\";","module.exports = __webpack_public_path__ + \"static/media/chant.eceb32e3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/electric-guitar.63575580.mp3\";","module.exports = __webpack_public_path__ + \"static/media/national-anthem.c9e4155a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/testfile.8a7680f1.mp3\";","import React from 'react';\r\nimport './AppHeaderTitle.css';\r\n\r\nexport default class AppHeaderTitle extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <h1 className=\"header-title header-title--white\">{this.props.title}</h1>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './AppHeaderLogo.css';\r\n\r\nexport default class AppHeaderLogo extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <img src={this.props.logo} className=\"app-logo\" alt=\"logo\" />\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './AppHeader.css';\r\n\r\nimport AppHeaderTitle from '../components/AppHeaderTitle';\r\nimport AppHeaderLogo from '../components/AppHeaderLogo';\r\n\r\n\r\nexport default class AppHeader extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header header--dark\">\r\n                <AppHeaderLogo logo={this.props.logo}></AppHeaderLogo>\r\n                <AppHeaderTitle title={this.props.title}></AppHeaderTitle>\r\n            </header>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './PlayButton.css';\r\n\r\nexport default class PlayButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.togglePlay = this.togglePlay.bind(this);\r\n    }\r\n\r\n    togglePlay() {\r\n        this.props.onTogglePlay();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"btn\" onClick={this.togglePlay}>\r\n                <i className={`btn__icon fa ${this.props.isPlaying ? 'fa-pause' : 'fa-play'}`}></i>\r\n            </button>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './TrackName.css';\r\n\r\nexport default class TrackName extends React.Component {\r\n    render() {\r\n        return (\r\n            <h3 className=\"name\">{this.props.name}</h3>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Peaks from 'peaks.js';\r\nimport './Track.css';\r\nimport PlayButton from './PlayButton';\r\nimport TrackName from './TrackName';\r\n\r\nexport default class Track extends React.Component {\r\n\r\n    state = {\r\n        isTrackReady: false\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.containerRef = React.createRef();\r\n        this.audioRef = React.createRef();\r\n        this.togglePlay = this.togglePlay.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (!this.props.isPlaying) {\r\n            this.audioRef.current.pause();\r\n        } else if (this.props.isPlaying) {\r\n            this.audioRef.current.play();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.peaksInit();\r\n    }\r\n\r\n    peaksInit() {\r\n        this.peaks = Peaks.init({\r\n            container: this.containerRef.current,\r\n            mediaElement: this.audioRef.current,\r\n            webAudio: {\r\n                audioContext: new AudioContext(),\r\n            },\r\n            zoomWaveformColor: 'rgba(0, 225, 128, 1)',\r\n            overviewWaveformColor: 'rgba(0,0,0,0.2)',\r\n            overviewHighlightRectangleColor: 'green',\r\n            height: 100,\r\n        },\r\n            () => this.setState({ ...this.state, isTrackReady: true })\r\n        );\r\n\r\n        this.peaks.zoom.setZoom(0);\r\n    }\r\n\r\n    togglePlay() {\r\n        if (!this.props.isPlaying) {\r\n            this.props.onPlay(this.props.id);\r\n        } else {\r\n            this.props.onStop();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const invisibleCssClass = !this.state.isTrackReady ? 'track--invisible' : '';\r\n        return (\r\n            <div className={`track track--dark ${invisibleCssClass}`}>\r\n                <TrackName name={this.props.name}></TrackName>\r\n                <PlayButton onTogglePlay={this.togglePlay} isPlaying={this.props.isPlaying}>Play</PlayButton>\r\n                <div ref={this.containerRef} className=\"track__waveform\">Loading...</div>\r\n                <audio ref={this.audioRef}>\r\n                    <source src={this.props.source} type='audio/mpeg; codecs=\"mp3\"'></source>\r\n                </audio>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Track from '../components/Track';\r\nimport './TrackList.css';\r\n\r\nexport default class TrackList extends React.Component {\r\n\r\n    state = {\r\n        currentPlayingTrack: -1\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onTrackPlay = this.onTrackPlay.bind(this);\r\n        this.onTrackStop = this.onTrackStop.bind(this);\r\n    }\r\n\r\n    onTrackPlay(id) {\r\n        this.setState({ ...this.state, currentPlayingTrack: id });\r\n    }\r\n\r\n    onTrackStop() {\r\n        this.setState({ ...this.state, currentPlayingTrack: -1 });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"track-list\">\r\n                {\r\n                    this.props.tracks.map((track) =>\r\n                        <Track\r\n                            key={`track-${track.id}`}\r\n                            id={track.id}\r\n                            name={track.name}\r\n                            source={track.file}\r\n                            onPlay={this.onTrackPlay}\r\n                            onStop={this.onTrackStop}\r\n                            isPlaying={track.id === this.state.currentPlayingTrack}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nimport * as sample from './test_data/sample.mp3';\r\nimport * as chant from './test_data/chant.mp3';\r\nimport * as guitar from './test_data/electric-guitar.mp3';\r\nimport * as anthem from './test_data/national-anthem.mp3';\r\nimport * as testfile from './test_data/testfile.mp3';\r\n\r\nimport AppHeader from './app-header/conatiners/AppHeader';\r\nimport TrackList from './player/containers/TrackList';\r\n\r\nfunction App() {\r\n\r\n  const tracks = [\r\n    {\r\n      id: 0,\r\n      name: 'sample',\r\n      file: sample\r\n    },\r\n    {\r\n      id: 1,\r\n      name: 'chant',\r\n      file: chant\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'electric guitar',\r\n      file: guitar\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'national anthem',\r\n      file: anthem\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'test file',\r\n      file: testfile\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <AppHeader title=\"Peaks.js Player\" logo={logo}></AppHeader>\r\n      <TrackList tracks={tracks}></TrackList>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}